Assignment: Introduction to Software Engineering Instructions: Answer the following questions based on your understanding of software engineering concepts. Provide detailed explanations and examples where appropriate.

Questions: Define Software Engineering:

What is software engineering, and how does it differ from traditional programming?
A: Software engineering is the systematic application of engineering principles, methods, and tools to the development and maintenance of high-quality software systems. It involves the design, development, testing, deployment, and maintenance of software products.cIt differs from traditional programming in that while traditional programming is centered around the code, software engineering is extended over the entire lifecycle of the software, from conception to maintenance, emphasizing a structured and methodical approach to software development. https://medium.com/@antonellosemeraro/heres-the-real-difference-between-programming-and-software-engineering.

*from class notes

Software Development Life Cycle (SDLC):

Explain the various phases of the Software Development Life Cycle. Provide a brief description of each phase.
• Requirements: Gathering and documenting user needs and system requirements.
• Design: Creating high-level and detailed designs of the software architecture and user interface.
• Implementation: Writing code and building the software according to the design specifications.
• Testing: Conducting various tests to ensure the software meets quality standards and functional requirements.
• Deployment: Releasing the software to users and customers.
• Maintenance: Providing ongoing support, updates, and enhancements to the software after deployment.

*from class notes

Agile vs. Waterfall Models:

Compare and contrast the Agile and Waterfall models of software development. What are the key differences, and in what scenarios might each be preferred?
• Waterfall: Sequential approach with distinct phases (e.g., requirements, design, implementation) flowing downwards like a waterfall. 
• Agile: Iterative and incremental approach focused on flexibility, collaboration, and responding to change. 

When to use Waterfall:
• When the requirements are constant and not changed regularly.
• When a project is short.
• When the situation is calm.
• Where the tools and technology used is consistent and is not changing.
• When resources are well prepared and are available to use.

https://www.javatpoint.com/software-engineering-waterfall-model

When to use Agile:
• When frequent changes are required.
• When a highly qualified and experienced team is available.
• When a customer is ready to have a meeting with a software team all the time.
• When project size is small.

https://www.javatpoint.com/software-engineering-agile-model

Requirements Engineering:

What is requirements engineering? Describe the process and its importance in the software development lifecycle.
Requirements engineering is the process of identifying, documenting, and managing requirements in the engineering design process. The process has the following four stages:
• Elicit requirements: Elicitation is the process of being informed of all of the key information associated with the project.
• Requirements specification: This is when the functional and nonfunctional project requirements are gathered.
• Verification and validation: During this stage, the client’s requirements are verified if they meet the project goals.
• Requirements management: During this stage, all the requirements are analyzed, documented for developers, and prioritized to communicate with the client.qu
Requirements engineering is important because it sets a specific path for project development. Also, clients may have a long list of ideas, features, and functionalities when building new software, and requirements engineering gives them a framework for fitting into these ideas.

https://codilime.com/blog/requirements-engineering/

Software Design Principles:

Explain the concept of modularity in software design. How does it improve maintainability and scalability of software systems?
Modularity specifies the division of software into separate modules that are differently named and addressed and are integrated later on to obtain the completely functional software.
Modularity can improve maintainability by separating different functions in a software system into different units - modules - it becomes possible to change or correct a flaw in a module without affecting the other parts of the system. One can work on one module without affecting the others, and debugging and maintenance become simplified and easy. Modularity can improve scalability by allowing additional modules that can be added to enable more features or expand on existing features and functions

https://www.javatpoint.com/software-engineering-software-design-principles

Testing in Software Engineering:

Describe the different levels of software testing (unit testing, integration testing, system testing, acceptance testing). Why is testing crucial in software development?
• Unit Testing: Testing individual components or modules of software
• Integration Testing: Testing interactions between different components or subsystem
• System Testing: Testing the entire software system as a whole
• Acceptance Testing: Testing the software against user requirements to ensure it meets user needs
It is crucial in software development because quality control measures such as code reviews, automated testing, and continuous integration help identify and fix defects early in the development process leading to higher-quality software products

Version Control Systems:

What are version control systems, and why are they important in software development? Give examples of popular version control systems and their features. 
Version control systems are a category of software tools that helps in recording changes made to files by keeping a track of modifications done in the code.It is important in that it helps the developer team to efficiently communicate and manage(track) all the changes that have been made to the source code along with the information like who made and what changes have been made

Below is a list of popular version control systems and their features:

Helix Core — Helix Core, one of the leading version control examples, is a centralized version control system by Perforce Software. It’s the leading version control system for game developers and is also used in media & entertainment and semiconductor design, among other industries. It offers visibility to collaborative teams, showing when others are using the same data, and it provides a locking strategy to prevent the overwriting of critical data. It is free for up to five users.
Git — Git is a widely popular, distributed control system for developers. Git source control is open-source and therefor free to use. It offers easy branching and is great for small projects but has file and repo size limits.
SVN — SVN (short for Subversion) is another free, open-source version control system developed by Apache. It is a centralized version control system. It offers good concurrent development processes, but its branch and merge functions are not strong.

https://www.geeksforgeeks.org/version-control-systems/

Software Project Management:

Discuss the role of a software project manager. What are some key responsibilities and challenges faced in managing software projects?
The main role of software project manager is to execute and supervise the software project life cycle and to ensure that it is working as per desired schedule. Project manager is also responsible for establishing proper coordination between project stakeholders.
Key responsibilities are: planning everything from execution to delivery, overseeing the software development team, delegating work effectively, monitoring progress and tracking roadblocks, and managing the deployment of deliverables. 
Challenges faced in managing software projects:
• Misalignment between goals and business objectives
• Communication
• Lack of accountability
• Resource allocation
• Scope creep
• Project management software
• Poor planning and unrealistic deadlines

https://www.tatvasoft.com/outsourcing/2023/02/role-of-software-project-manager.html

Software Maintenance:

Define software maintenance and explain the different types of maintenance activities. Why is maintenance an essential part of the software lifecycle? Ethical 
Software maintenance is the modification and updating of software applications after delivery to correct errors and to improve performance

Software maintenance includes:
• Corrective Maintenance: It aims to correct any remaining errors in specifications, design, coding, testing, and documentation, etc.
• Adaptive Maintenance: It involves modifying the software to match changes in the ever-changing environment.
• Preventative Maintenance: It is the process by which we prevent our system from being obsolete. It involves the concept of reengineering & reverse engineering in which an old system with old technology is re-engineered using new technology. This maintenance prevents the system from dying out.
• Perfective Maintenance: It defines improving processing efficiency or performance or restricting the software to enhance changeability. This may contain enhancement of existing system functionality, improvement in computational efficiency, etc.

https://www.javatpoint.com/software-engineering-software-maintenance

Considerations in Software Engineering:

What are some ethical issues that software engineers might face? How can software engineers ensure they adhere to ethical standards in their work? 
Some ethical issues:
• addictive design;
• corporate ownership of personal data;
• algorithmic bias;
• weak cyber security and personally identifiable information (PII) protection; and
• overemphasis on features over impact.

https://www.techtarget.com/searchsoftwarequality/tip/5-examples-of-ethical-issues-in-software-development

Education and training are key to promoting ethical practices in software development. 
Organizations should foster a culture of ethics, ensuring that ethical standards are communicated and upheld at all levels. 
Ethical decision-making models can also help guide software engineers in making responsible choices.

https://www.linkedin.com/pulse/software-development-ethics-guide-responsible-coding-trohe/

Submission Guidelines: Your answers should be well-structured, concise, and to the point. Provide real-world examples or case studies wherever possible. Cite any references or sources you use in your answers. Submit your completed assignment by [due date].
